<ServiceDirectory>
  <Collection code="Test" collectionName="A test collection"/>
  <Collection code="Test2" collectionName="A second test collection"/>
  <Collection code="COLIS" collectionName="Colis"/>
  <Collection code="ztest" collectionName="test z3950 collection"/>
  <Collection code="LC/BOOKS" collectionName="Library of Congress, Books Collection"/>

  <CollectionPosting coll="Test" namespace="InfoType" code="CitizensInformation"/>
  <CollectionPosting coll="Test" namespace="InfoType" code="Bibliographic"/>
  <CollectionPosting coll="Test" namespace="InfoType" code="SubjectResource"/>
  <CollectionPosting coll="LC/BOOKS" namespace="InfoType" code="Bibliographic"/>


  <!-- Simple example IR provider that randomly waits up to 10 seconds before returning records and is well behaved -->
  <Repository className="org.jzkit.search.provider.SimpleExample.ExampleIRServiceFactory"
              code="Test" 
              serviceName="Test Repository">
    <Preferences>
      <Preference name="randomDelay">10</Preference>
      <Preference name="behaviour">normal</Preference>
    </Preferences>
    <RecordArchetypes>
      <Archetype name="BRIEF">usmarc::F</Archetype>
    </RecordArchetypes>
  </Repository>

  <!-- Simple example IR provider that randomly waits up to 2 seconds before returning records and is well behaved -->
  <Repository className="org.jzkit.search.provider.SimpleExample.ExampleIRServiceFactory"
              code="Test2" 
              serviceName="Test Repository 2">
    <Preferences>
      <Preference name="randomDelay">10</Preference>
      <Preference name="behaviour">normal</Preference>
    </Preferences>
    <RecordArchetypes>
      <Archetype name="BRIEF">xml:dc:F</Archetype>
    </RecordArchetypes>
  </Repository>

  <!-- Test SRW provider -->
  <Repository className="org.jzkit.search.provider.SRW.SRWIRServiceFactory"
              code="OCLC-COLIS"
              serviceName="OCLC Colis Repository">
    <Preferences>
      <Preference name="baseURL">http://alcme.oclc.org/axis/SOAR/services/SearchRetrieveService</Preference>
    </Preferences>
    <RecordArchetypes>
      <Archetype name="BRIEF">xml:dc:F</Archetype>
    </RecordArchetypes>
  </Repository>

  <!-- A really cheeky z3950 loopback that will search the Test Repository above ;) -->
  <Repository className="org.jzkit.search.provider.z3950.Z3950ServiceFactory"
              code="z3950.k-int.com"
              serviceName="JZKit test z39.50 server">
    <Preferences>
      <Preference name="default_record_syntax">xml</Preference>
      <Preference name="default_element_set_name">F</Preference>
      <Preference name="host">localhost</Preference>
      <Preference name="port">210</Preference>
      <Preference name="smallSetElementSetName">F</Preference>
      <Preference name="charsetEncoding">UTF-8</Preference>
      <Preference name="useReferenceId">negotiate</Preference>
    </Preferences>
    <RecordArchetypes>
      <Archetype name="BRIEF">usmarc::F</Archetype>
    </RecordArchetypes>
  </Repository>

  <!-- The type parameter is used when looking for factories to create instances of
       Searchable capable of searching the identified repository -->
  <Repository className="org.jzkit.search.provider.z3950.Z3950ServiceFactory"
              code="LC/LIVE" 
              servceName="Library of congress live server">
    <Preferences>
      <Preference name="default_record_syntax">usmarc</Preference>
      <Preference name="default_element_set_name">F</Preference>
      <Preference name="host">z3950.loc.gov</Preference>
      <Preference name="port">3700</Preference>
      <Preference name="defaultRecordSyntax">xml</Preference>
      <Preference name="defaultElementSetName">F</Preference>
      <Preference name="smallSetElementSetName">F</Preference>
      <Preference name="charsetEncoding">UTF-8</Preference>
      <Preference name="useReferenceId">negotiate</Preference>
    </Preferences>
    <RecordArchetypes>
      <Archetype name="BRIEF">usmarc::F</Archetype>
    </RecordArchetypes>
  </Repository>

  <!-- Map logical collection-dn strings on to physical instances of databases at targets (in z-speak) -->
  <Instance collectionCode="Test" repositoryCode="Test">
    <Details code="Test" localId="LocalTest" profile="bath" />
  </Instance>

  <Instance collectionCode="Test2" repositoryCode="Test2">
    <Details code="Test2" localId="LocalTest2" profile="bath" />
  </Instance>

  <Instance collectionCode="COLIS" repositoryCode="OCLC-COLIS">
    <Details code="OCLC-COLIS" profile="lom" />
   </Instance>

  <Instance collectionCode="ztest" repositoryCode="z3950.k-int.com">
    <Details code="ztest" localId="Test" profile="bath" />
  </Instance>

  <Instance collectionCode="LC/BOOKS" repositoryCode="LC/LIVE">
    <Details code="LC/BOOKS" localId="voyager" profile="bath" />
  </Instance>

  <!-- Application profiles may be used to indicate what type of query
       are acceptable to a given collection instance. For example,
       an OAI resource of learning objects might be made available as a
       z39.50 database using the lom profile at one repository, and the
       bath profile at another. Not specifying a profile for a collection
       instance means that queries will be sent to that collection 
       with no checking as to suitability. -->
  <ApplicationProfiles>
    <ClasspathProfile resource="/config/profiles/bath.xml"/>
    <ClasspathProfile resource="/config/profiles/lom.xml"/>
  </ApplicationProfiles>

  <Crosswalks>
    <!-- Defacto crosswalk from bib-1 concepts -->
    <ClasspathCrosswalk resource="/config/crosswalks/QueryModel/bib-1.xml"/> 
  </Crosswalks>

  <RecordConversion>
    <!-- N.B. from elements are now regular expressions :) -->
                                                                                                                                        
    <!-- Syntax registry : xml, grs, sutrs, database, ... -->
    <!-- Schema registry : oai-dc, sutrs, usmarc, ukmarc, gils, lom, etc -->
                                                                                                                                        
    <!-- Register all known converters. Should really be done using commons discovery... -->
    <!-- Convert from on DOMFragment into another using XSL -->
    <converter type="DOM-XSL-DOM" classname="org.jzkit.search.util.RecordConversion.StandardXSLTTransformer"/>
    <converter type="DOM-XSL-TXT" classname="org.jzkit.search.util.RecordConversion.StringProducerTransformer"/>
    <!-- <converter type="Extract" class="org.jzkit.search.util.RecordConversion.DOMProducerTransformer"/> -->
    <!-- Convert from a database entity based fragment into a DOM based fragment -->
    <!-- <converter type="DBToDOM" class="com.k_int.util.conv.EntityToDOMTransformer"/> -->
                                                                                                                                        
    <!-- Transformation Registry -->

    <!-- From lazy loading database driven DOM tree to "F"ull XML dom tree -->
    <!--
    <mapping from="DB:Book:null" to="XML:oai-dc:B" type="DBToDOM" sheet="xsl/DBBoolToXMLB.xsl"/>
    <mapping from="DB:Book:null" to="XML:oai-dc:F" type="DBToDOM" sheet="xsl/DBBoolToXMLF.xsl"/>
    <mapping from="DB:Book:null" to="XML:oai-dc:E" type="DBToDOM" sheet="xsl/DBBoolToXMLE.xsl"/>
    -->
                                                                                                                                        
    <!-- Our preferred mapping from OAI-DC to Sutrs when full records available -->
    <!-- Map to text/plain -->
    <mapping fromSpec="xml:oai-dc:[Ff]" 
             toSpec="sutrs:plain:F" 
             type="DOM-XSL-TXT" 
             resource="/config/crosswalks/RecordModel/OAI-DC_2_SUTRS_F.xsl"/>

    <!-- Otherwise match any old element set name -->
    <mapping fromSpec="xml:oai-dc:.*" 
             toSpec="sutrs:plain:F" 
             type="DOM-XSL-TXT" 
             resource="/config/crosswalks/RecordModel/OAI-DC_2_SUTRS_F.xsl"/>
    <mapping fromSpec="xml:oai-dc:.*" 
             toSpec="sutrs:plain:B" 
             type="DOM-XSL-TXT" 
             resource="/config/crosswalks/RecordModel/OAI-DC_2_SUTRS_B.xsl"/>
                                                                                                                                        
    <!-- Map to text/html -->
    <mapping fromSpec="xml:oai-dc:[Ff]" 
             toSpec="sutrs:html:F" 
             type="DOM-XSL-TXT" 
             resource="/config/crosswalks/RecordModel/OAI-DC_2_HTML_F.xsl"/>
    <mapping fromSpec="xml:oai-dc:[Bb]" 
             toSpec="sutrs:html:B" 
             type="DOM-XSL-TXT" 
             resource="/config/crosswalks/RecordModel/OAI-DC_2_HTML_B.xsl"/>
                                                                                                                                        
    <!-- This is the generic GRS-1 mapping.. we should add profiled alternatives above -->
    <mapping fromSpec="grs-1:.*:.*" 
             toSpec="sutrs:html:B" 
             type="DOM-XSL-TXT" 
             resource="/config/crosswalks/RecordModel/Gils_To_HTML_brief.xsl"/>
    <mapping fromSpec="grs-1:.*:.*" 
             toSpec="sutrs:html:F" 
             type="DOM-XSL-TXT" 
             resource="/config/crosswalks/RecordModel/Gils_To_HTML_full.xsl"/>

  </RecordConversion>

</ServiceDirectory>
